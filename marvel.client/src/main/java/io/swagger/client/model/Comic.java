/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Cable
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.CharacterList;
import io.swagger.client.model.CreatorList;
import io.swagger.client.model.EventList;
import io.swagger.client.model.Image;
import io.swagger.client.model.SeriesSummary;
import io.swagger.client.model.StoryList;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Comic
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-02-21T01:26:09.968009500-05:00[America/Lima]")
public class Comic {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("digitalId")
  private Integer digitalId = null;

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("issueNumber")
  private Double issueNumber = null;

  @JsonProperty("variantDescription")
  private String variantDescription = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("modified")
  private java.util.Date modified = null;

  @JsonProperty("isbn")
  private String isbn = null;

  @JsonProperty("upc")
  private String upc = null;

  @JsonProperty("diamondCode")
  private String diamondCode = null;

  @JsonProperty("ean")
  private String ean = null;

  @JsonProperty("issn")
  private String issn = null;

  @JsonProperty("format")
  private String format = null;

  @JsonProperty("pageCount")
  private Integer pageCount = null;

  @JsonProperty("textObjects")
  private java.util.List textObjects = null;

  @JsonProperty("resourceURI")
  private String resourceURI = null;

  @JsonProperty("urls")
  private java.util.List urls = null;

  @JsonProperty("series")
  private SeriesSummary series = null;

  @JsonProperty("variants")
  private java.util.List variants = null;

  @JsonProperty("collections")
  private java.util.List collections = null;

  @JsonProperty("collectedIssues")
  private java.util.List collectedIssues = null;

  @JsonProperty("dates")
  private java.util.List dates = null;

  @JsonProperty("prices")
  private java.util.List prices = null;

  @JsonProperty("thumbnail")
  private Image thumbnail = null;

  @JsonProperty("images")
  private java.util.List images = null;

  @JsonProperty("creators")
  private CreatorList creators = null;

  @JsonProperty("characters")
  private CharacterList characters = null;

  @JsonProperty("stories")
  private StoryList stories = null;

  @JsonProperty("events")
  private EventList events = null;

  public Comic id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Comic digitalId(Integer digitalId) {
    this.digitalId = digitalId;
    return this;
  }

   /**
   * Get digitalId
   * @return digitalId
  **/
  @Schema(description = "")
  public Integer getDigitalId() {
    return digitalId;
  }

  public void setDigitalId(Integer digitalId) {
    this.digitalId = digitalId;
  }

  public Comic title(String title) {
    this.title = title;
    return this;
  }

   /**
   * The canonical title of the comic.
   * @return title
  **/
  @Schema(description = "The canonical title of the comic.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Comic issueNumber(Double issueNumber) {
    this.issueNumber = issueNumber;
    return this;
  }

   /**
   * Get issueNumber
   * @return issueNumber
  **/
  @Schema(description = "")
  public Double getIssueNumber() {
    return issueNumber;
  }

  public void setIssueNumber(Double issueNumber) {
    this.issueNumber = issueNumber;
  }

  public Comic variantDescription(String variantDescription) {
    this.variantDescription = variantDescription;
    return this;
  }

   /**
   * If the issue is a variant (e.g. an alternate cover, second printing, or director’s cut), a text description of the variant.
   * @return variantDescription
  **/
  @Schema(description = "If the issue is a variant (e.g. an alternate cover, second printing, or director’s cut), a text description of the variant.")
  public String getVariantDescription() {
    return variantDescription;
  }

  public void setVariantDescription(String variantDescription) {
    this.variantDescription = variantDescription;
  }

  public Comic description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The preferred description of the comic.
   * @return description
  **/
  @Schema(description = "The preferred description of the comic.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Comic modified(java.util.Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Get modified
   * @return modified
  **/
  @Schema(description = "")
  public java.util.Date getModified() {
    return modified;
  }

  public void setModified(java.util.Date modified) {
    this.modified = modified;
  }

  public Comic isbn(String isbn) {
    this.isbn = isbn;
    return this;
  }

   /**
   * The ISBN for the comic (generally only populated for collection formats).
   * @return isbn
  **/
  @Schema(description = "The ISBN for the comic (generally only populated for collection formats).")
  public String getIsbn() {
    return isbn;
  }

  public void setIsbn(String isbn) {
    this.isbn = isbn;
  }

  public Comic upc(String upc) {
    this.upc = upc;
    return this;
  }

   /**
   * The UPC barcode number for the comic (generally only populated for periodical formats).
   * @return upc
  **/
  @Schema(description = "The UPC barcode number for the comic (generally only populated for periodical formats).")
  public String getUpc() {
    return upc;
  }

  public void setUpc(String upc) {
    this.upc = upc;
  }

  public Comic diamondCode(String diamondCode) {
    this.diamondCode = diamondCode;
    return this;
  }

   /**
   * The Diamond code for the comic.
   * @return diamondCode
  **/
  @Schema(description = "The Diamond code for the comic.")
  public String getDiamondCode() {
    return diamondCode;
  }

  public void setDiamondCode(String diamondCode) {
    this.diamondCode = diamondCode;
  }

  public Comic ean(String ean) {
    this.ean = ean;
    return this;
  }

   /**
   * The EAN barcode for the comic.
   * @return ean
  **/
  @Schema(description = "The EAN barcode for the comic.")
  public String getEan() {
    return ean;
  }

  public void setEan(String ean) {
    this.ean = ean;
  }

  public Comic issn(String issn) {
    this.issn = issn;
    return this;
  }

   /**
   * The ISSN barcode for the comic.
   * @return issn
  **/
  @Schema(description = "The ISSN barcode for the comic.")
  public String getIssn() {
    return issn;
  }

  public void setIssn(String issn) {
    this.issn = issn;
  }

  public Comic format(String format) {
    this.format = format;
    return this;
  }

   /**
   * The publication format of the comic e.g. comic, hardcover, trade paperback.
   * @return format
  **/
  @Schema(description = "The publication format of the comic e.g. comic, hardcover, trade paperback.")
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }

  public Comic pageCount(Integer pageCount) {
    this.pageCount = pageCount;
    return this;
  }

   /**
   * Get pageCount
   * @return pageCount
  **/
  @Schema(description = "")
  public Integer getPageCount() {
    return pageCount;
  }

  public void setPageCount(Integer pageCount) {
    this.pageCount = pageCount;
  }

  public Comic textObjects(java.util.List textObjects) {
    this.textObjects = textObjects;
    return this;
  }

   /**
   * Get textObjects
   * @return textObjects
  **/
  @Schema(description = "")
  public java.util.List getTextObjects() {
    return textObjects;
  }

  public void setTextObjects(java.util.List textObjects) {
    this.textObjects = textObjects;
  }

  public Comic resourceURI(String resourceURI) {
    this.resourceURI = resourceURI;
    return this;
  }

   /**
   * The canonical URL identifier for this resource.
   * @return resourceURI
  **/
  @Schema(description = "The canonical URL identifier for this resource.")
  public String getResourceURI() {
    return resourceURI;
  }

  public void setResourceURI(String resourceURI) {
    this.resourceURI = resourceURI;
  }

  public Comic urls(java.util.List urls) {
    this.urls = urls;
    return this;
  }

   /**
   * Get urls
   * @return urls
  **/
  @Schema(description = "")
  public java.util.List getUrls() {
    return urls;
  }

  public void setUrls(java.util.List urls) {
    this.urls = urls;
  }

  public Comic series(SeriesSummary series) {
    this.series = series;
    return this;
  }

   /**
   * Get series
   * @return series
  **/
  @Schema(description = "")
  public SeriesSummary getSeries() {
    return series;
  }

  public void setSeries(SeriesSummary series) {
    this.series = series;
  }

  public Comic variants(java.util.List variants) {
    this.variants = variants;
    return this;
  }

   /**
   * Get variants
   * @return variants
  **/
  @Schema(description = "")
  public java.util.List getVariants() {
    return variants;
  }

  public void setVariants(java.util.List variants) {
    this.variants = variants;
  }

  public Comic collections(java.util.List collections) {
    this.collections = collections;
    return this;
  }

   /**
   * Get collections
   * @return collections
  **/
  @Schema(description = "")
  public java.util.List getCollections() {
    return collections;
  }

  public void setCollections(java.util.List collections) {
    this.collections = collections;
  }

  public Comic collectedIssues(java.util.List collectedIssues) {
    this.collectedIssues = collectedIssues;
    return this;
  }

   /**
   * Get collectedIssues
   * @return collectedIssues
  **/
  @Schema(description = "")
  public java.util.List getCollectedIssues() {
    return collectedIssues;
  }

  public void setCollectedIssues(java.util.List collectedIssues) {
    this.collectedIssues = collectedIssues;
  }

  public Comic dates(java.util.List dates) {
    this.dates = dates;
    return this;
  }

   /**
   * Get dates
   * @return dates
  **/
  @Schema(description = "")
  public java.util.List getDates() {
    return dates;
  }

  public void setDates(java.util.List dates) {
    this.dates = dates;
  }

  public Comic prices(java.util.List prices) {
    this.prices = prices;
    return this;
  }

   /**
   * Get prices
   * @return prices
  **/
  @Schema(description = "")
  public java.util.List getPrices() {
    return prices;
  }

  public void setPrices(java.util.List prices) {
    this.prices = prices;
  }

  public Comic thumbnail(Image thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

   /**
   * Get thumbnail
   * @return thumbnail
  **/
  @Schema(description = "")
  public Image getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(Image thumbnail) {
    this.thumbnail = thumbnail;
  }

  public Comic images(java.util.List images) {
    this.images = images;
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @Schema(description = "")
  public java.util.List getImages() {
    return images;
  }

  public void setImages(java.util.List images) {
    this.images = images;
  }

  public Comic creators(CreatorList creators) {
    this.creators = creators;
    return this;
  }

   /**
   * Get creators
   * @return creators
  **/
  @Schema(description = "")
  public CreatorList getCreators() {
    return creators;
  }

  public void setCreators(CreatorList creators) {
    this.creators = creators;
  }

  public Comic characters(CharacterList characters) {
    this.characters = characters;
    return this;
  }

   /**
   * Get characters
   * @return characters
  **/
  @Schema(description = "")
  public CharacterList getCharacters() {
    return characters;
  }

  public void setCharacters(CharacterList characters) {
    this.characters = characters;
  }

  public Comic stories(StoryList stories) {
    this.stories = stories;
    return this;
  }

   /**
   * Get stories
   * @return stories
  **/
  @Schema(description = "")
  public StoryList getStories() {
    return stories;
  }

  public void setStories(StoryList stories) {
    this.stories = stories;
  }

  public Comic events(EventList events) {
    this.events = events;
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @Schema(description = "")
  public EventList getEvents() {
    return events;
  }

  public void setEvents(EventList events) {
    this.events = events;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Comic comic = (Comic) o;
    return Objects.equals(this.id, comic.id) &&
        Objects.equals(this.digitalId, comic.digitalId) &&
        Objects.equals(this.title, comic.title) &&
        Objects.equals(this.issueNumber, comic.issueNumber) &&
        Objects.equals(this.variantDescription, comic.variantDescription) &&
        Objects.equals(this.description, comic.description) &&
        Objects.equals(this.modified, comic.modified) &&
        Objects.equals(this.isbn, comic.isbn) &&
        Objects.equals(this.upc, comic.upc) &&
        Objects.equals(this.diamondCode, comic.diamondCode) &&
        Objects.equals(this.ean, comic.ean) &&
        Objects.equals(this.issn, comic.issn) &&
        Objects.equals(this.format, comic.format) &&
        Objects.equals(this.pageCount, comic.pageCount) &&
        Objects.equals(this.textObjects, comic.textObjects) &&
        Objects.equals(this.resourceURI, comic.resourceURI) &&
        Objects.equals(this.urls, comic.urls) &&
        Objects.equals(this.series, comic.series) &&
        Objects.equals(this.variants, comic.variants) &&
        Objects.equals(this.collections, comic.collections) &&
        Objects.equals(this.collectedIssues, comic.collectedIssues) &&
        Objects.equals(this.dates, comic.dates) &&
        Objects.equals(this.prices, comic.prices) &&
        Objects.equals(this.thumbnail, comic.thumbnail) &&
        Objects.equals(this.images, comic.images) &&
        Objects.equals(this.creators, comic.creators) &&
        Objects.equals(this.characters, comic.characters) &&
        Objects.equals(this.stories, comic.stories) &&
        Objects.equals(this.events, comic.events);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, digitalId, title, issueNumber, variantDescription, description, modified, isbn, upc, diamondCode, ean, issn, format, pageCount, textObjects, resourceURI, urls, series, variants, collections, collectedIssues, dates, prices, thumbnail, images, creators, characters, stories, events);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Comic {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    digitalId: ").append(toIndentedString(digitalId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    issueNumber: ").append(toIndentedString(issueNumber)).append("\n");
    sb.append("    variantDescription: ").append(toIndentedString(variantDescription)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    isbn: ").append(toIndentedString(isbn)).append("\n");
    sb.append("    upc: ").append(toIndentedString(upc)).append("\n");
    sb.append("    diamondCode: ").append(toIndentedString(diamondCode)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    issn: ").append(toIndentedString(issn)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    pageCount: ").append(toIndentedString(pageCount)).append("\n");
    sb.append("    textObjects: ").append(toIndentedString(textObjects)).append("\n");
    sb.append("    resourceURI: ").append(toIndentedString(resourceURI)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("    collections: ").append(toIndentedString(collections)).append("\n");
    sb.append("    collectedIssues: ").append(toIndentedString(collectedIssues)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    creators: ").append(toIndentedString(creators)).append("\n");
    sb.append("    characters: ").append(toIndentedString(characters)).append("\n");
    sb.append("    stories: ").append(toIndentedString(stories)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
